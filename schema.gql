# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type CaseEntity {
  createdAt: DateTime!
  createdUserId: ID!
  description: String!
  expectedResult: String!
  id: ID!
  importance: CaseImportance!
  name: String!
  precondition: String!
  steps: [StepEntity!]!
  tags: [TagEntity!]!
  templateId: ID!
  updatedAt: DateTime!
  user: UserEntity!
}

input CaseFiltersInput {
  templateId: ID!
}

"""Importance status for case"""
enum CaseImportance {
  HIGH
  LOW
  MIDDLE
}

input CreateCaseInput {
  description: String
  expectedResult: String
  importance: CaseImportance!
  name: String!
  precondition: String
  steps: [String!] = []
  tagIds: [ID!] = []
  templateId: ID!
}

input CreateOrganizationInput {
  description: String
  name: String!
}

input CreateProjectInput {
  description: String
  name: String!
  organizationId: String!
}

input CreateTagInput {
  color: String!
  organizationId: ID!
  title: String!
}

input CreateTemplateInput {
  description: String = ""
  name: String!
  organizationId: ID!
  projectId: ID
  tagIds: [ID!] = []
}

input CreateUserInput {
  email: String!
  fname: String!
  lname: String
  organizationId: ID
  password: String!
}

input CreateUserInviteInput {
  email: String!
  organizationId: ID!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Mutation {
  createCase(createCaseInput: CreateCaseInput!): CaseEntity!
  createOrganization(createOrgInput: CreateOrganizationInput!): OrganizationEntity!
  createProject(createProjectInput: CreateProjectInput!): ProjectEntity!
  createTag(createTagInput: CreateTagInput!): TagEntity!
  createTemplate(createTemplateInput: CreateTemplateInput!): TemplateEntity!
  createUser(createUser: CreateUserInput!): UserEntity!
  createUserInvite(createUserInviteInput: CreateUserInviteInput!): UserInviteEntity!
  removeCase(id: String!): String!
  removeOrganization(id: String!): String!
  removeProject(id: String!): String!
  removeTag(id: String!): String!
  removeTemplate(id: String!): String!
  removeUser(id: String!): String!
  updateCase(updateCaseInput: UpdateCaseInput!): CaseEntity!
  updateOrganization(updateOrgInput: UpdateOrganizationInput!): OrganizationEntity!
  updateProject(updateProjectInput: UpdateProjectInput!): ProjectEntity!
  updateTag(updateTagInput: UpdateTagInput!): TagEntity!
  updateTemplate(updateTemplateInput: UpdateTemplateInput!): TemplateEntity!
  updateUser(updateUser: UpdateUserInput!): UserEntity!
}

type OrganizationEntity {
  createdAt: DateTime!
  createdUserId: ID!
  description: String!
  id: ID!
  name: String!
  organizationUsers: [OrganizationUserEntity!]!
  projects: [ProjectEntity!]!
  status: OrganizationStatus!
  updatedAt: DateTime!
}

input OrganizationFiltersInput {
  userId: ID
}

"""The organization statuses"""
enum OrganizationStatus {
  ACTIVE
  BLOCKED
  DISABLE
}

type OrganizationUserEntity {
  createdAt: DateTime!
  id: ID!
  organization: OrganizationEntity!
  organizationId: ID!
  updatedAt: DateTime!
  user: UserEntity!
  userId: ID!
}

input OrganizationUsersInput {
  organizationId: ID!
}

type ProjectEntity {
  createdAt: DateTime!
  createdUserId: ID!
  description: String!
  id: ID!
  name: String!
  organization: OrganizationEntity!
  organizationId: ID!
  status: ProjectStatus!
  updatedAt: DateTime!
}

input ProjectFiltersInput {
  organizationId: String!
}

"""The organization statuses"""
enum ProjectStatus {
  ACTIVE
  BLOCKED
  DISABLE
}

type Query {
  case(id: String!): CaseEntity!
  cases(filters: CaseFiltersInput): [CaseEntity!]!
  organization(id: String!): OrganizationEntity!
  organizationUsers(organizationUsersInput: OrganizationUsersInput!): [OrganizationUserEntity!]!
  organizations(filters: OrganizationFiltersInput): [OrganizationEntity!]!
  project(id: String!): ProjectEntity!
  projects(filters: ProjectFiltersInput): [ProjectEntity!]!
  tag(id: String!): TagEntity!
  tags(filters: TagFiltersInput!): [TagEntity!]!
  template(id: String!): TemplateEntity!
  templates(filters: TemplateFiltersInput): [TemplateEntity!]!
  user(id: String!): UserEntity!
  userInvites(filters: UserInvitesInput): [UserInviteEntity!]!
  userOrganizations(userOrganizationsInput: UserOrganizationsInput!): [OrganizationUserEntity!]!
  users: [UserEntity!]!
}

type StepEntity {
  caseId: ID!
  createdAt: DateTime!
  id: ID!
  title: String!
  updatedAt: DateTime!
}

type TagEntity {
  caseId: ID!
  color: String!
  createdAt: DateTime!
  createdUserId: ID!
  id: ID!
  organizationId: ID!
  templateId: ID!
  title: String!
  updatedAt: DateTime!
}

input TagFiltersInput {
  caseId: ID
  organizationId: ID
  templateId: ID
}

type TemplateEntity {
  cases: [CaseEntity!]!
  createdAt: DateTime!
  createdUserId: ID
  description: String!
  id: ID!
  name: String!
  organization: OrganizationEntity!
  organizationId: ID!
  project: ProjectEntity
  projectId: ID
  tags: [TagEntity!]!
  updatedAt: DateTime!
  user: UserEntity!
}

input TemplateFiltersInput {
  organizationId: ID
}

input UpdateCaseInput {
  description: String
  id: ID!
  name: String!
}

input UpdateOrganizationInput {
  description: String
  id: ID!
  name: String
}

input UpdateProjectInput {
  description: String
  id: ID!
  name: String
}

input UpdateTagInput {
  color: String
  id: ID!
  title: String
}

input UpdateTemplateInput {
  description: String
  id: ID!
  name: String
}

input UpdateUserInput {
  fname: String
  id: ID!
  lname: String
  status: String
}

type UserEntity {
  createdAt: DateTime!
  email: String!
  fname: String!
  id: ID!
  lname: String!
  role: UserRole!
  updatedAt: DateTime!
  userOrganizations: [OrganizationUserEntity!]!
}

type UserInviteEntity {
  code: String!
  createdAt: DateTime!
  email: String!
  id: ID!
  organizationId: ID!
  updatedAt: DateTime!
}

input UserInvitesInput {
  organizationId: ID!
}

input UserOrganizationsInput {
  userId: ID!
}

"""The user supported roles."""
enum UserRole {
  ADMIN
  SUPER_ADMIN
  USER
}